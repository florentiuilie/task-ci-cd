name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Build and Push Docker Image
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Node.js for Semantic Release
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Semantic Release
        run: npm install -g semantic-release

      - name: Generate Version using Semantic Release
        id: version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Run semantic release and capture version
          VERSION=$(npx semantic-release --ci | grep -Eo '"version": "[^"]+"' | awk -F'"' '{print $4}')
          if [ -z "$VERSION" ]; then
            echo "Error: VERSION is not set"
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Generated version: $VERSION"

      - name: Debug Environment Variables
        run: |
          echo "IMAGE_NAME=$IMAGE_NAME"
          echo "VERSION=$VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin   

      - name: Build and Push Docker Image
        env:
          IMAGE_NAME: ${{ secrets.DOCKER_REPO }}
          VERSION: ${{ env.VERSION }}
        run: |
          if [ -z "$VERSION" ]; then
            echo "Error: VERSION is not set"
            exit 1
          fi
          docker build -t $IMAGE_NAME:$VERSION .
          docker tag $IMAGE_NAME:$VERSION $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$VERSION
          docker push $IMAGE_NAME:latest

  # Deploy to Production Environment
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    steps:
      - name: Log in to Docker Registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin   

      - name: Deploy to Production
        env:
          IMAGE_NAME: ${{ secrets.DOCKER_REPO }}
          VERSION: ${{ env.VERSION }}
        run: |
          echo "Deploying to Production Environment..."
          docker pull $IMAGE_NAME:$VERSION || exit 1
          docker stop sample-app-prod || true
          docker rm sample-app-prod || true
          docker run -d --name sample-app-prod -p 80:80 $IMAGE_NAME:$VERSION

  # Rollback Strategy
  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-prod]
    if: failure()
    steps:
      - name: Log in to Docker Registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin   

      - name: Rollback to Previous Version
        env:
          IMAGE_NAME: ${{ secrets.DOCKER_REPO }}
        run: |
          echo "Rolling back to the previous version..."
          PREVIOUS_VERSION=$(docker ps --filter "name=sample-app-prod" --format "{{.Image}}" | awk -F: '{print $2}')
          if [ -n "$PREVIOUS_VERSION" ]; then
            docker pull $IMAGE_NAME:$PREVIOUS_VERSION
            docker stop sample-app-prod || true
            docker rm sample-app-prod || true
            docker run -d --name sample-app-prod -p 80:80 $IMAGE_NAME:$PREVIOUS_VERSION
          else
            echo "No previous version available for rollback."
          fi
