name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Versioning using Semantic Release
  versioning:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    outputs:
      new_version: ${{ steps.semantic.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/exec @semantic-release/npm

      - name: Run Semantic Release
        id: semantic
        run: |
          RELEASE_VERSION=$(npx semantic-release | grep -ioP "The next release version is \\K[0-9]+\\.[0-9]+\\.[0-9]+") || true
          if [[ -z "$RELEASE_VERSION" ]]; then
            echo "No new version detected."
          else
            echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Debug Version Output
        run: echo "New VERSION=${{ steps.semantic.outputs.version }}"

  # Build and Push Docker Image to Amazon ECR
  build-and-push-ecr:
    runs-on: ubuntu-latest
    needs: [versioning]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Assume IAM Role
        id: assume-role
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          ROLE_CREDENTIALS=$(aws sts assume-role \
            --role-arn ${{ secrets.IAM_ROLE_ARN }} \
            --role-session-name github-actions-session)

          echo "AWS_ACCESS_KEY_ID=$(echo $ROLE_CREDENTIALS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $ROLE_CREDENTIALS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $ROLE_CREDENTIALS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV


      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Build and Push Docker Image to Amazon ECR
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          REPO_NAME: ${{ secrets.ECR_REPO }}
          IMAGE_VERSION: ${{ needs.versioning.outputs.new_version || 'latest' }}
        run: |
          if [[ -z "$IMAGE_VERSION" ]]; then
            echo "Error: IMAGE_VERSION is empty!"
            exit 1
          fi

          # Define ECR image URL
          ECR_IMAGE_URL="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_NAME"

          echo "Building Docker image..."
          docker build -t $ECR_IMAGE_URL:$IMAGE_VERSION .

          echo "Tagging images..."
          docker tag $ECR_IMAGE_URL:$IMAGE_VERSION $ECR_IMAGE_URL:latest

          echo "Pushing images to Amazon ECR..."
          docker push $ECR_IMAGE_URL:$IMAGE_VERSION
          docker push $ECR_IMAGE_URL:latest


  # Deploy to Development Environment
  deploy-environment:
    runs-on: ubuntu-latest
    needs: [versioning, build-and-push-ecr]
    if: ${{ needs.versioning.outputs.new_version != '' }}
    steps:
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Deploy to Development
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          REPO_NAME: ${{ secrets.ECR_REPO }}
          IMAGE_VERSION: ${{ needs.versioning.outputs.new_version || 'latest' }}
        run: |
          echo "Deploying to Development Environment..."

          # Define ECR image URL
          ECR_IMAGE_URL="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_NAME"

          docker pull $ECR_IMAGE_URL:$IMAGE_VERSION
          docker run -d --name sample-app -p 8080:8080 $ECR_IMAGE_URL:$IMAGE_VERSION