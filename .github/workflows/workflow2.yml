name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Build and Push Docker Image
  build-and-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Semantic Release for Versioning
        uses: cycjimmy/semantic-release-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Authenticates with GitHub for tagging and releasing
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }} # Docker Hub username
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }} # Docker Hub password
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            @semantic-release/github
            @semantic-release/docker

      - name: Log in to Docker Registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        env:
          IMAGE_NAME: ${{ secrets.DOCKER_REPO }}
        run: |
          # Retrieve version from semantic-release
          VERSION=$(npx semantic-release --dry-run | grep 'The next release version is' | awk '{print $NF}')
          echo "Using version: $VERSION"

          # Build and tag the Docker image
          docker build -t $IMAGE_NAME:${VERSION} .
          docker tag $IMAGE_NAME:${VERSION} $IMAGE_NAME:latest

          # Push the images
          docker push $IMAGE_NAME:${VERSION}
          docker push $IMAGE_NAME:latest

  # Run Tests (for pull requests and pre-deployment validation)
  test:
    runs-on: ubuntu-latest
    needs: [build-and-version]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Tests
        run: |
          echo "Running tests...Done"

    # Example 1: Install Dependencies
      - name: Install Dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f package.json ]; then
            npm install
          else
            echo "No dependencies to install"
          fi

      # Example 2: Run Unit Tests
      - name: Run Unit Tests
        run: |
          if [ -f pytest.ini ]; then
            pytest
          elif [ -f package.json ]; then
            npm test
          else
            echo "No unit tests found"
          fi

# end of tests

  # Deploy to Development Environment
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Log in to Docker Registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Deploy to Development
        env:
          IMAGE_NAME: ${{ secrets.DOCKER_REPO }}
        run: |
          echo "Deploying to Development Environment..."
          docker pull $IMAGE_NAME:latest
          docker run -d --name sample-app-dev -p 8080:8080 $IMAGE_NAME:latest

  # Deploy to Production Environment
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    steps:
      - name: Log in to Docker Registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Deploy to Production
        env:
          IMAGE_NAME: ${{ secrets.DOCKER_REPO }}
        run: |
          echo "Deploying to Production Environment..."
          docker pull $IMAGE_NAME:latest
          docker run -d --name sample-app-prod -p 80:80 $IMAGE_NAME:latest
